#+title: Solutions for touretzky2013common
#+author: Ioannis Eleftheriou

A workbook with exercises and solution (attempts) from Common LISP: A gentle introduction to symbolic computation by David S. Touretzky.
#+begin_src latex
@book{touretzky2013common,
  title={Common LISP: A gentle introduction to symbolic computation},
  author={Touretzky, David S},
  year={2013},
  publisher={Courier Corporation}
}
#+end_src


* Table of Contents :TOC:
- [[#chapter-1-functions-and-data][Chapter 1 Functions and Data]]
  - [[#11-use-your-knowledge-of-arithmetic-to-fill-in-the-missing-item][1.1 Use your knowledge of arithmetic to fill in the missing item]]
  - [[#12-put-an-s-if-it-is-a-symbol-i-if-it-is-an-integer-or-n-if-it-is-some-other-kind-of-number][1.2 Put an "S" if it is a symbol, "I" if it is an integer, or "N" if it is some other kind of number.]]
  - [[#13-fill-in-the-result-of-each-computation][1.3 Fill in the result of each computation]]
  - [[#14-define-a-sub2-function-that-subtracts-two-from-its-input][1.4 Define a SUB2 function that subtracts two from its input.]]
  - [[#15-show-how-to-write-twop-in-terms-of-zerop-and-sub2][1.5 Show how to write TWOP in terms of ZEROP and SUB2]]
  - [[#16-the-half-function-returns-a-number-that-is-one-half-of-its-input-show-how-to-define-half-two-different-ways][1.6 The HALF function returns a number that is one-half of its input. Show how to define HALF two different ways.]]
  - [[#17-write-a-multi-digit-p-predicate-that-returns-true-if-its-input-is][1.7 Write a MULTI-DIGIT-P predicate that returns true if its input is]]
  - [[#18-what-does-this-function-do-to-a-number][1.8 What does this function do to a number?]]
  - [[#19-write-a-predicate-twomorep-that-returns-t-if-its-first-input-is-exactly-two-more-than-its-second-input-use-the-add2-function-in-your-definition-of-twomorep][1.9 Write a predicate TWOMOREP that returns T if its first input is exactly two more than its second input. Use the ADD2 function in your definition of TWOMOREP.]]
  - [[#110-find-a-way-to-write-the-twomorep-predicate-using-sub2-instead-of-add2][1.10 Find a way to write the TWOMOREP predicate using SUB2 instead of ADD2.]]
  - [[#111-the-average-of-two-numbers-is-half-their-sum--write-the-average-function][1.11 The average of two numbers is half their sum.  Write the AVERAGE function.]]
  - [[#112-write-a-more-than-half-p-predicate-that-returns-t-if-its-first-input-is-more-than-half-of-its-second-input][1.12 Write a MORE-THAN-HALF-P predicate that returns T if its first input is more than half of its second input.]]
  - [[#113-the-following-function-returns-the-same-result-no-matter-what-its-input-what-result-does-it-return][1.13 The following function returns the same result no matter what its input. What result does it return?]]
  - [[#114-fill-in-the-results-of-the-following-computations][1.14 Fill in the results of the following computations]]
  - [[#115-write-a-predicate-not-onep-that-returns-t-if-its-input-is-anything-other-than-one][1.15 Write a predicate NOT-ONEP that returns T if its input is anything other than one.]]
  - [[#116-write-the-predicate-not-plusp-that-returns-t-if-its-input-is-not-greater-than-zero][1.16 Write the predicate NOT-PLUSP that returns T if its input is not greater than zero.]]
  - [[#117-some-earlier-lisp-dialects-did-not-have-the-evenp-primitive-they-only-had-oddp-show-how-to-define-evenp-in-terms-of-oddp][1.17 Some earlier Lisp dialects did not have the EVENP primitive; they only had ODDP. Show how to define EVENP in terms of ODDP.]]
  - [[#118-under-what-condition-does-this-predicate-function-return-t][1.18 Under what condition does this predicate function return T?]]
  - [[#119-what-result-does-the-function-below-produce-when-given-the-input-nil-what-about-the-input-t-will-all-data-flow-through-this-function-unchanged-what-result-is-produced-for-the-input-rutabaga][1.19 What result does the function below produce when given the input NIL? What about the input T? Will all data flow through this function unchanged? What result is produced for the input RUTABAGA?]]
  - [[#120-a-truth-function-is-a-function-whose-inputs-and-output-are-truth-values-that-is-true-or-false-not-is-a-truth-function-even-though-not-accepts-other-inputs-besides-t-or-nil-it-only-cares-if-its-input-is-true-or-not-write-xor-the-exclusive-or-truth-function-which-returns-t-when-one-of-its-inputs-is-nil-and-the-other-is-t-but-returns-nil-when-both-are-nil-or-both-are-t][1.20 A truth function is a function whose inputs and output are truth values, that is, true or false. NOT is a truth function. (Even though NOT accepts other inputs besides T or NIL, it only cares if its input is true or not.) Write XOR, the exclusive-or truth function, which returns T when one of its inputs is NIL and the other is T, but returns NIL when both are NIL or both are T.]]
  - [[#121-what-is-wrong-with-each-of-these-functions][1.21 What is wrong with each of these functions?]]
  - [[#122-are-all-predicates-functions-are-all-functions-predicates][1.22 Are all predicates functions? Are all functions predicates?]]
  - [[#123-which-built-in-predicates-introduced-in-this-chapter-have-names-that-do-not-end-in-p][1.23 Which built-in predicates introduced in this chapter have names that do not end in "P"?]]
  - [[#124-is-number-a-number-is-symbol-a-symbol][1.24 Is NUMBER a number? Is SYMBOL a symbol?]]
  - [[#125-why-is-false-true-in-lisp][1.25 Why is FALSE true in Lisp?]]
  - [[#126-true-or-false-a-all-predicates-accept-t-or-nil-as-input-b-all-predicates-produce-t-or-nil-as-output][1.26 True or false: (a) All predicates accept T or NIL as input; (b) all predicates produce T or NIL as output.]]
  - [[#127-give-an-example-of-the-use-of-evenp-that-would-cause-a-wrong-type-input-error-give-an-example-that-would-cause-a-wrong-number-of-inputs-error][1.27 Give an example of the use of EVENP that would cause a wrong-type-input error. Give an example that would cause a wrong-number-of-inputs error.]]
- [[#chapter-2-lists][Chapter 2 Lists]]
  - [[#21-show-how-the-list-to-be-or-not-to-be-would-be-represented-in-computer-memory-by-drawing-its-cons-cell-representation][2.1 Show how the list (TO BE OR NOT TO BE) would be represented in computer memory by drawing its cons cell representation]]
  - [[#22-which-of-these-are-well-formed-lists-that-is-which-ones-have-properly-balanced-parentheses][2.2 Which of these are well-formed lists? That is, which ones have properly balanced parentheses?]]
  - [[#23-draw-the-cons-cell-representation-of-the-list-please-be-my-valentine][2.3 Draw the cons cell representation of the list (PLEASE (BE MY) VALENTINE).]]
  - [[#24-what-is-the-parenthesis-notation-for-this-cons-cell-structure][2.4 What is the parenthesis notation for this cons cell structure?]]
  - [[#25-how-many-elements-do-each-of-the-following-lists-have][2.5 How many elements do each of the following lists have?]]
  - [[#26-match-each-list-on-the-left-with-a-corresponding-list-on-the-right-by-substituting-nil-for--wherever-possible-pay-careful-attention-to-levels-of-parenthesization][2.6 Match each list on the left with a corresponding list on the right by substituting NIL for () wherever possible. Pay careful attention to levels of parenthesization.]]
  - [[#27-what-goes-on-inside-the-my-second-box-when-it-is-given-the-input-honk-if-you-like-geese][2.7 What goes on inside the MY-SECOND box when it is given the input (HONK IF YOU LIKE GEESE)?]]
  - [[#28-show-how-to-write-my-third-using-first-and-two-rests][2.8 Show how to write MY-THIRD using FIRST and two RESTs.]]
  - [[#29-show-how-to-write-my-third-using-second][2.9 Show how to write MY-THIRD using SECOND.]]
  - [[#210-draw-the-cons-cell-representation-of-the-list-phone-home-which-has-three-levels-of-parentheses-what-is-the-car-of-this-list-what-is-the-cdr][2.10 Draw the cons cell representation of the list (((PHONE HOME))), which has three levels of parentheses. What is the CAR of this list? What is the CDR?]]
  - [[#211-draw-the-cons-cell-representation-of-the-list-a-toll-call][2.11 Draw the cons cell representation of the list (A (TOLL) ((CALL))).]]
  - [[#212-what-cr-name-does-lisp-use-for-the-function-that-returns-the-fourth-element-of-a-list-how-would-you-pronounce-it][2.12 What C...R name does Lisp use for the function that returns the fourth element of a list? How would you pronounce it?]]
  - [[#213-write-down-tables-similar-to-the-one-above-to-illustrate-how-to-get-to-each-word-in-the-list-fun-in-the-sun][2.13 Write down tables similar to the one above to illustrate how to get to each word in the list (((FUN)) (IN THE) (SUN)).]]
  - [[#214-what-would-happen-if-you-tried-to-explain-the-operation-of-the-caadr-function-on-the-list-blue-cube-red-pyramid-by-reading-the-as-and-ds-from-left-to-right-instead-of-from-right-to-left][2.14 What would happen if you tried to explain the operation of the CAADR function on the list ((BLUE CUBE) (RED PYRAMID) by reading the As and Ds from left to right instead of from right to left?]]
  - [[#215-using-the-list-a-b-c-d-e-f-fill-in-the-missing-parts-of-this-table][2.15 Using the list ((A B) (C D) (E F)), fill in the missing parts of this table.]]
  - [[#216-what-does-caar-do-when-given-the-input-fred-nil][2.16 What does CAAR do when given the input (FRED NIL)?]]
  - [[#217-fill-in-the-results-of-the-following-computations][2.17 Fill in the results of the following computations.]]
  - [[#218-write-a-function-that-takes-any-two-inputs-and-makes-a-list-of-them-using-cons][2.18 Write a function that takes any two inputs and makes a list of them using CONS.]]

* Chapter 1 Functions and Data
** 1.1 Use your knowledge of arithmetic to fill in the missing item
*** Solution
|            13 |
|             3 |
|             / |
|             3 |
|             3 |
|           -48 |
| $\frac{5}{3}$ |
|             0 |
|             - |
| $\frac{2}{3}$ |
|             2 |

** 1.2 Put an "S" if it is a symbol, "I" if it is an integer, or "N" if it is some other kind of number.
*** Solution
| S |
| I |
| S |
| S |
| I |
| N |
| S |
| S |
| S |
| I |
| I |
| S |

** 1.3 Fill in the result of each computation
*** Solution
| T   |
| NIL |
| NIL |
| NIL |
| T   |
| T   |
| NIL |

** 1.4 Define a SUB2 function that subtracts two from its input.
*** Solution
#+begin_src lisp
(defun sub2 (num)
  (- num 2))
#+end_src

** 1.5 Show how to write TWOP in terms of ZEROP and SUB2
*** Solution
#+begin_src lisp
(defun twop (num)
  (zerop (sub2 num)))
#+end_src
** 1.6 The HALF function returns a number that is one-half of its input. Show how to define HALF two different ways.
*** Solution
#+begin_src lisp
(defun half (num)
  (/ num 2))
#+end_src

#+begin_src lisp
(defun half (num)
  (* num 0.5))
#+end_src
** 1.7 Write a MULTI-DIGIT-P predicate that returns true if its input is
*** Solution
#+begin_src lisp
(defun multi-digit-p (num)
  (> num 9))
#+end_src
** 1.8 What does this function do to a number?
*** Solution
Multiplies by -1.
** 1.9 Write a predicate TWOMOREP that returns T if its first input is exactly two more than its second input. Use the ADD2 function in your definition of TWOMOREP.
*** Solution
#+begin_src lisp
(defun twomorep (n1 n2)
  (= n2 (add2 n1)))
#+end_src
** 1.10 Find a way to write the TWOMOREP predicate using SUB2 instead of ADD2.
*** Solution
#+begin_src lisp
(defun twomorep (n1 n2)
  (= n1 (sub2 n2)))
#+end_src
** 1.11 The average of two numbers is half their sum.  Write the AVERAGE function.
*** Solution
#+begin_src lisp
(defun average (n1 n2)
  (/ (+ n1 n2) 2))
#+end_src

** 1.12 Write a MORE-THAN-HALF-P predicate that returns T if its first input is more than half of its second input.
*** Solution
#+begin_src lisp
(defun more-than-half-p (n1 n2)
  (> n1 (/ n2 2)))
#+end_src
** 1.13 The following function returns the same result no matter what its input. What result does it return?
*** Solution
#+begin_src lisp
(defun testp (something)
  (symbolp (numberp something)))

(testp 100) ;=> t
(testp t) ;=> t
(testp nil) ;=> t
#+end_src

** 1.14 Fill in the results of the following computations
*** Solutions
| T                |
| NIL              |
| UNBOUND-VARIABLE |

** 1.15 Write a predicate NOT-ONEP that returns T if its input is anything other than one.
*** Solution
#+begin_src lisp
(defun not-onep (num)
  (not (= num 1)))
#+end_src

** 1.16 Write the predicate NOT-PLUSP that returns T if its input is not greater than zero.
*** Solution
#+begin_src lisp
(defun not-plusp (num)
  (not (> num 0)))
#+end_src

** 1.17 Some earlier Lisp dialects did not have the EVENP primitive; they only had ODDP. Show how to define EVENP in terms of ODDP.
*** Solution
#+begin_src lisp
(defun evenp (num)
  (not (oddp num)))
#+end_src

** 1.18 Under what condition does this predicate function return T?
#+begin_src lisp
(lambda (num)
  (zerop (add1 (add1 num))))
#+end_src
*** Solution
When input is -2.

** 1.19 What result does the function below produce when given the input NIL? What about the input T? Will all data flow through this function unchanged? What result is produced for the input RUTABAGA?
#+begin_src lisp
(lambda (input) (not (not input)))
#+end_src
*** Solution
+ When input is NIL, output is T.
+ Not all data will flow through this function unchanged.

#+begin_src lisp
(defun rutabaga-function (something)
  (not (not something)))

(rutabaga-function 'rutabaga) ;=> t
#+end_src
+ Result for the symbol RUTABAGA is t.

** 1.20 A truth function is a function whose inputs and output are truth values, that is, true or false. NOT is a truth function. (Even though NOT accepts other inputs besides T or NIL, it only cares if its input is true or not.) Write XOR, the exclusive-or truth function, which returns T when one of its inputs is NIL and the other is T, but returns NIL when both are NIL or both are T.
*** Solution
#+begin_src lisp
(defun xor (n1 n2)
  (not (equal n1 n2)))
#+end_src
** 1.21 What is wrong with each of these functions?
#+begin_src lisp
(lambda (n)
  (add1 (zerop n)))
#+end_src

#+begin_src lisp
(lambda (n1 n2)
  (equal (+ 1 2)))
#+end_src

#+begin_src lisp
(lambda (n1 n2)
  (symbolp (not n1 n2)))
#+end_src
*** Solution
+ TYPE-ERROR
+ SIMPLE-PROGRAM-ERROR (EQUAL function requires two inputs)
+ SIMPLE-PROGRAM-ERROR (NOT function requires a single input)

** 1.22 Are all predicates functions? Are all functions predicates?
*** Solution
Yes. No.

** 1.23 Which built-in predicates introduced in this chapter have names that do not end in "P"?
*** Solution
EQUAL, <, >.

** 1.24 Is NUMBER a number? Is SYMBOL a symbol?
*** Solution
No. Yes.

** 1.25 Why is FALSE true in Lisp?
*** Solution
FALSE is a symbol, not a boolean value.

** 1.26 True or false: (a) All predicates accept T or NIL as input; (b) all predicates produce T or NIL as output.
*** Solution
a) False
b) True

** 1.27 Give an example of the use of EVENP that would cause a wrong-type-input error. Give an example that would cause a wrong-number-of-inputs error.
*** Solution
Wrong type of input.
#+begin_src lisp
(evenp 'something)
#+end_src

Wrong number of inputs.
#+begin_src lisp
(evenp)
#+end_src
* Chapter 2 Lists

For drawing cons diagrams first load the following into the REPL.

#+begin_src lisp
(ql:quickload :draw-cons-tree)
#+end_src

** 2.1 Show how the list (TO BE OR NOT TO BE) would be represented in computer memory by drawing its cons cell representation
*** Solution
#+begin_src lisp
(TO BE OR NOT TO BE)
; [o|o]---[o|o]---[o|o]---[o|o]---[o|o]---[o|/]
;  |       |       |       |       |       |
;  TO      BE      OR     NOT      TO      BE
#+end_src

** 2.2 Which of these are well-formed lists? That is, which ones have properly balanced parentheses?
#+begin_src lisp
(A B (C)
((A) (B))
A B ) (C D)
(A (B (C))
(A (B (C)))
(((A) (B)) (C))
#+end_src
*** Solution
#+begin_src lisp
(A B (C)
((A) (B)) ; ok
A B ) (C D)
(A (B (C))
(A (B (C))) ;ok
(((A) (B)) (C)) ;ok
#+end_src

** 2.3 Draw the cons cell representation of the list (PLEASE (BE MY) VALENTINE).
*** Solution
#+begin_src lisp
; [o|o]---[o|o]---[o|/]
;  |       |       |
; PLEASE   |      VALENTINE
;          |
;         [o|o]---[o|/]
;          |       |
;          BE      MY
#+end_src

** 2.4 What is the parenthesis notation for this cons cell structure?
#+begin_src lisp
; [o|o]---[o|/]
;  |       |
;  |      [o|o]---[o|/]
;  |       |       |
;  |      FLOWERS CHOCHOLATES
;  |      
; [o|o]---[o|/]
;  |       |
; BOWS    ARROWS
#+end_src
*** Solution
#+begin_src lisp
((BOWS ARROWS) (FLOWERS CHOCHOLATES))
#+end_src

** 2.5 How many elements do each of the following lists have?
*** Solution
#+begin_src lisp
(length '(open the pod bay doors hal))
 ; => 6 (3 bits, #x6, #o6, #b110)

(length '((open) (the pod bay doors) hal))
 ; => 3 (2 bits, #x3, #o3, #b11)

(length '((1 2 3) (4 5 6) (7 8 9) (10 11 12)))
 ; => 4 (3 bits, #x4, #o4, #b100)

(length '((one) for all (and (two (for me)))))
 ; => 4 (3 bits, #x4, #o4, #b100)

(length '((q spades)
          (7 hearts)
          (6 clubs)
          (5 diamonds)
          (2 diamonds)))
 ; => 5 (3 bits, #x5, #o5, #b101)

(length '((pennsylvania (the keystone state))
          (new-jersey (the garden state))
          (massachussets (the bay state))
          (florida (the sunshine state))
          (new-york (the empire state))
          (indiana (the hoosier state))))
 ; => 6 (3 bits, #x6, #o6, #b110)
#+end_src

** 2.6 Match each list on the left with a corresponding list on the right by substituting NIL for () wherever possible. Pay careful attention to levels of parenthesization.
*** Solution
#+begin_src lisp
() ;== NIL
(()) ;== (NIL)
((())) ;== ((NIL))
(() ()) ;== (NIL NIL)
(() (())) ;== (NIL (NIL))
#+end_src

** 2.7 What goes on inside the MY-SECOND box when it is given the input (HONK IF YOU LIKE GEESE)?
*** Solution
#+begin_src lisp

(defun my-second (n)
  (first (rest n)))

(my-second '(HONK IF YOU LIKE GEESE))
 ; => IF
#+end_src

** 2.8 Show how to write MY-THIRD using FIRST and two RESTs.
*** Solution
#+begin_src lisp
(defun my-third (n)
  (first (rest (rest n))))
#+end_src

** 2.9 Show how to write MY-THIRD using SECOND.
*** Solution
#+begin_src lisp
(defun my-third (n)
  (second (rest n)))
#+end_src

** 2.10 Draw the cons cell representation of the list (((PHONE HOME))), which has three levels of parentheses. What is the CAR of this list? What is the CDR?
*** Solution
#+begin_src lisp
; [o|/]
;  |
; [o|/]
;  |
; [o|o]---[o|/]
;  |       |
; PHONE   HOME
#+end_src

CAR:
#+begin_src lisp
; [o|/]
;  |
; [o|o]---[o|/]
;  |       |
; PHONE   HOME
#+end_src

CDR:
#+begin_src lisp
; NIL
#+end_src

** 2.11 Draw the cons cell representation of the list (A (TOLL) ((CALL))).
*** Solution
#+begin_src lisp
; [o|o]---[o|o]---[o|/]
;  |       |       |
;  A      [o|/]   [o|/]
;          |       |
;         TOLL    [o|/]
;                  |
;                 CALL
#+end_src

** 2.12 What C...R name does Lisp use for the function that returns the fourth element of a list? How would you pronounce it?
*** Solution
CADDDR. Pronounced "fourth" by a normal person. Or /ka-dih-dih-der/.

** 2.13 Write down tables similar to the one above to illustrate how to get to each word in the list (((FUN)) (IN THE) (SUN)).
*** Solution
#+begin_src lisp
(setf testlist '(((FUN)) (IN THE) (SUN)))
 ; => (((FUN)) (IN THE) (SUN))

(caaar testlist)
 ; => FUN

(caadr testlist)
 ; => IN

(cadadr testlist)
 ; => THE

(caaddr testlist)
 ; => SUN
#+end_src

** 2.14 What would happen if you tried to explain the operation of the CAADR function on the list ((BLUE CUBE) (RED PYRAMID) by reading the As and Ds from left to right instead of from right to left?
*** Solution
We would expect to get an error. The equivalent expressiong would be CDAAR.
#+begin_src lisp
(cdaar ((BLUE CUBE) (RED PYRAMID)))
 ; => BLUE not a list error
#+end_src

The interpreter expects to get the rest of the elements from a list stored in BLUE as a variable.

** 2.15 Using the list ((A B) (C D) (E F)), fill in the missing parts of this table.
*** Solution
#+begin_src lisp
(setf testlist '((A B) (C D) (E F)))

(car testlist)
 ; => (A B)

(cddr testlist)
 ; => ((E F))

(cadr testlist)
 ; => (C D)

(cdar testlist)
 ; => (B)

(cadar testlist)
 ; => B

(caar testlist)
 ; => A

(cdaddr testlist)
 ; => (F)

(cadaddr testlist) ; Note that this function is undefined
 ; => F
#+end_src
** 2.16 What does CAAR do when given the input (FRED NIL)?
*** Solution
#+begin_src lisp
(caar '(FRED NIL))
 ; => ERROR: FRED is not of type LIST
#+end_src
** 2.17 Fill in the results of the following computations.
#+begin_src lisp
(car '(post no bills))
 ; => POST
(cdr '(post no bills))
 ; => (NO BILLS)
(car '((post no) bills))
 ; => (POST NO)
(cdr '(bills))
 ; => NIL
(car 'bills)
 ; => TYPE-ERROR: BILLS is not of type LIST
(cdr '(post (no bills)))
 ; => ((NO BILLS))
(cdr '((post no bills)))
 ; => NIL
(car nil)
 ; => NIL
#+end_src
** 2.18 Write a function that takes any two inputs and makes a list of them using CONS.
*** Solution
#+begin_src lisp
(defun combine (n1 n2)
  (cons n1 (cons n2 nil)))
 ; => COMBINE

(combine 1 2)
 ; => (1 2)
#+end_src
